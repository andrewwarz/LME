---
# Red Hat-specific Nix setup

- name: Detect if SELinux tooling is available
  command: which getenforce
  register: selinux_tooling
  changed_when: false
  failed_when: false
  become: yes

- name: Set SELinux availability fact
  set_fact:
    selinux_available: "{{ selinux_tooling.rc == 0 }}"

- name: Get current SELinux mode
  command: getenforce
  register: getenforce_out
  changed_when: false
  failed_when: false
  become: yes
  when: selinux_available | default(false)

- name: Remember if SELinux was enforcing
  set_fact:
    selinux_was_enforcing: "{{ selinux_available | default(false) and (getenforce_out.stdout | default('') | trim) == 'Enforcing' }}"

- name: Set SELinux to permissive for Nix install
  command: setenforce 0
  when: selinux_was_enforcing
  become: yes

- name: Check if Nix is already installed
  stat:
    path: /nix/var/nix/profiles/default/bin/nix
  register: nix_installed

- name: Create nix installation directory  
  file:
    path: /opt/nix-install
    state: directory
    mode: '0755'
  become: yes
  when: not nix_installed.stat.exists

- name: Create temporary directory for Nix install
  file:
    path: /opt/nix-install/tmp
    state: directory
    mode: '0755'
  become: yes
  when: not nix_installed.stat.exists

- name: Download Nix installer
  get_url:
    url: https://nixos.org/nix/install
    dest: /opt/nix-install/install-nix.sh
    mode: '0755'
  become: yes
  when: not nix_installed.stat.exists

- name: Install Nix package manager
  shell: sh /opt/nix-install/install-nix.sh --daemon --yes
  become: yes
  environment:
    TMPDIR: /opt/nix-install/tmp
  when: not nix_installed.stat.exists
  register: nix_install_result

- name: Debug Nix installation result
  debug:
    var: nix_install_result
  when: debug_mode | default(false) and not nix_installed.stat.exists

- name: Reload systemd units after Nix installation
  systemd:
    daemon_reload: yes
  become: yes
  when: not nix_installed.stat.exists

- name: Ensure nix-daemon service is started
  systemd:
    name: nix-daemon
    state: started
    enabled: yes
    daemon_reload: yes
  become: yes
  when: not nix_installed.stat.exists

- name: Ensure nix-daemon socket is enabled and started (for socket activation)
  systemd:
    name: nix-daemon.socket
    state: started
    enabled: yes
    daemon_reload: yes
  become: yes
  when: not nix_installed.stat.exists

- name: Add Nix channel
  command: nix-channel --add https://nixos.org/channels/nixpkgs-unstable nixpkgs
  become: yes
  environment:
    PATH: "{{ ansible_env.PATH }}:/nix/var/nix/profiles/default/bin"

- name: Update Nix channel
  command: nix-channel --update
  become: yes
  environment:
    PATH: "{{ ansible_env.PATH }}:/nix/var/nix/profiles/default/bin"

- name: Check if nix-users group exists
  group:
    name: nix-users
    state: present
  become: yes

- name: Add user to nix-users group
  user:
    name: "{{ install_user }}"
    groups: nix-users
    append: yes
  become: yes

- name: Install required packages
  command: nix-env -iA nixpkgs.podman nixpkgs.docker-compose
  become: yes
  environment:
    PATH: "{{ ansible_env.PATH }}:/nix/var/nix/profiles/default/bin"

- name: After Podman installation, apply SELinux booleans
  seboolean:
    name: "{{ item }}"
    state: yes
    persistent: yes
  become: yes
  loop:
    - container_manage_cgroup
    - container_use_devices
    - container_read_certs
    - domain_can_mmap_files
  when:
    - selinux_available | default(false)
    - (getenforce_out.stdout | default('') | trim) != 'Disabled'
  ignore_errors: yes  # Some booleans might not exist on all systems

- name: Restore SELinux enforcing mode
  command: setenforce 1
  when: selinux_was_enforcing
  become: yes

# It may not be a good thing to persist SELinux enforcement across reboots
# - name: Persist SELinux enforcement across reboots
#   lineinfile:
#     path: /etc/selinux/config
#     regexp: '^SELINUX='
#     line: 'SELINUX=enforcing'
#     create: no
#   when: selinux_was_enforcing
#   become: yes
